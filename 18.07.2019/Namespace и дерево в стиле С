////#ifndef STACK_H
//#define STACK_H
//
//#include <cassert> // для assert
//#include <iostream>
//
//#include <iomanip> // для setw
//
//namespace QQQ {
//
//	template <typename T>
//	class Stack
//	{
//	private:
//		T *stackPtr;                      // указатель на стек
//		const int size;                   // максимальное количество элементов в стеке
//		int top;                          // номер текущего элемента стека
//	public:
//		Stack(int = 10);                  // по умолчанию размер стека равен 10 элементам
//		Stack(const Stack<T> &);          // конструктор копирования
//		~Stack();                         // деструктор
//
//		inline void push(const T &);     // поместить элемент в вершину стека
//		inline T pop();                   // удалить элемент из вершины стека и вернуть его
//		inline void printStack();         // вывод стека на экран
//		inline const T &Peek(int) const; // n-й элемент от вершины стека
//		inline int getStackSize() const;  // получить размер стека
//		inline T *getPtr() const;         // получить указатель на стек
//		inline int getTop() const;        // получить номер текущего элемента в стеке
//	};
//
//	// реализация методов шаблона класса STack
//
//	// конструктор Стека
//	template <typename T>
//	Stack<T>::Stack(int maxSize) :
//		size(maxSize) // инициализация константы
//	{
//		stackPtr = new T[size]; // выделить память под стек
//		top = 0; // инициализируем текущий элемент нулем;
//	}
//
//	// конструктор копирования
//	template <typename T>
//	Stack<T>::Stack(const Stack<T> & otherStack) :
//		size(otherStack.getStackSize()) // инициализация константы
//	{
//		stackPtr = new T[size]; // выделить память под новый стек
//		top = otherStack.getTop();
//
//		for (int ix = 0; ix < top; ix++)
//			stackPtr[ix] = otherStack.getPtr()[ix];
//	}
//
//	// функция деструктора Стека
//	template <typename T>
//	Stack<T>::~Stack()
//	{
//		delete[] stackPtr; // удаляем стек
//	}
//
//	// функция добавления элемента в стек
//	template <typename T>
//	inline void Stack<T>::push(const T &value)
//	{
//		// проверяем размер стека
//		assert(top < size); // номер текущего элемента должен быть меньше размера стека
//
//		stackPtr[top++] = value; // помещаем элемент в стек
//	}
//
//	// функция удаления элемента из стека
//	template <typename T>
//	inline T Stack<T>::pop()
//	{
//		// проверяем размер стека
//		assert(top > 0); // номер текущего элемента должен быть больше 0
//
//		return stackPtr[--top]; // удаляем элемент из стека
//	}
//
//	// функция возвращает n-й элемент от вершины стека
//	template <class T>
//	inline const T &Stack<T>::Peek(int nom) const
//	{
//		//
//		assert(nom <= top);
//
//		return stackPtr[top - nom]; // вернуть n-й элемент стека
//	}
//
//	// вывод стека на экран
//	template <typename T>
//	inline void Stack<T>::printStack()
//	{
//		for (int ix = top - 1; ix >= 0; ix--)
//			std::cout << "|" << std::setw(4) << stackPtr[ix] << std::endl;
//	}
//
//	// вернуть размер стека
//	template <typename T>
//	inline int Stack<T>::getStackSize() const
//	{
//		return size;
//	}
//
//	// вернуть указатель на стек (для конструктора копирования)
//	template <typename T>
//	inline T *Stack<T>::getPtr() const
//	{
//		return stackPtr;
//	}
//
//	// вернуть размер стека
//	template <typename T>
//	inline int Stack<T>::getTop() const
//	{
//		return top;
//	}
//
//}
//
////#endif // STACK_H
//int main(){
//
//	setlocale(LC_ALL, "ru");
//
//	QQQ::Stack<char> stackSymbol(5);
//	int ct = 0;
//	//char ch;
//
//	while (ct++ < 5)
//	{
//		QQQ::Stack<char> stackSymbol(5);
//    int ct = 0;
//    char ch;
// 
//    while (ct++ < 5)
//    {
//        std::cin >> ch;
//        stackSymbol.push(ch); // помещаем элементы в стек
//    }
// 
//	std::cout << std::endl;
// 
//    stackSymbol.printStack(); // печать стека
// 
//	std::cout << "\n\nУдалим элемент из стека\n";
//    stackSymbol.pop();
// 
//    stackSymbol.printStack(); // печать стека
// 
//    QQQ::Stack<char> newStack(stackSymbol);
// 
//	std::cout << "\n\nСработал конструктор копирования!\n";
//    newStack.printStack();
// 
//	std::cout << "Второй в очереди элемент: "<< newStack.Peek(2) << std::endl; std::cin >> ch;
//		stackSymbol.push(ch); // помещаем элементы в стек
//	}
//
//	std::cout << std::endl;
//
//	stackSymbol.printStack(); // печать стека
//
//	std::cout << "\n\nУдалим элемент из стека\n";
//	stackSymbol.pop();
//
//	stackSymbol.printStack(); // печать стека
//
//	QQQ::Stack<char> newStack(stackSymbol);
//
//	std::cout << "\n\nСработал конструктор копирования!\n";
//	newStack.printStack();
//
//	std::cout << "Второй в очереди элемент: " << newStack.Peek(2) << std::endl;
//
//	
//    return 0; 
//}

//#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#define _CRT_SECURE_NO_WARNINGS
#define MAXWORD 100

typedef struct _tnode {                // узел дерева
	char *word;                  // указатель на строку (слово)
	int count;                   // число вхождений
	struct _tnode *left;          // левый потомок
	struct _tnode *right;         // правый потомок
} tnode;

// Функция добавления узла к дереву
tnode *addtree(tnode *p, char *w) {
	int cond;
	if (p == NULL) {
		p = (tnode *)malloc(sizeof(tnode));
		p->word = _strdup(w);
		p->count = 1;
		p->left = p->right = NULL;
	}
	else if ((cond = strcmp(w, p->word)) == 0)
		p->count++;
	else if (cond < 0)
		p->left = addtree(p->left, w);
	else
		p->right = addtree(p->right, w);
	return p;
}
// Функция удаления поддерева
void freemem(tnode *tree) {
	if (tree != NULL) {
		freemem(tree->left);
		freemem(tree->right);
		free(tree);
	}
}
// Функция вывода дерева
void treeprint(tnode *p) {
	if (p != NULL) {
		treeprint(p->left);
		printf("%d %s\n", p->count, p->word);
		treeprint(p->right);
	}
}
int main() {
	tnode *root;
	char word[MAXWORD];
	root = NULL;
	do {
		scanf_s("%s", word, MAXWORD);
		if (isalpha(word[0]))
			root = addtree(root, word);
	} while (word[0] != '0');    // условие выхода – ввод символа ‘0’
	treeprint(root);
	freemem(root);
	
	system("pause");

	return 0;
}
